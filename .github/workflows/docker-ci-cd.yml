name: Build & Push CircleCI Docker Runner

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Generate version (1.YYYY.RUN_NUMBER)
        id: version
        run: |
          if [ -f VERSION ]; then
            VERSION=$(cat VERSION | tr -d '\n')
            YEAR=$(date +'%Y')
            VERSION="1.${YEAR}.${{ github.run_number }}"
            echo "$VERSION" > VERSION
          else
            YEAR=$(date +'%Y')
            VERSION="1.${YEAR}.${{ github.run_number }}"
            echo "$VERSION" > VERSION
          fi

          echo "Using version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Commit & push VERSION file if needed
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"

          git add VERSION
          git commit -m "ci: update VERSION to ${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image name
        id: vars
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/circleci-docker-runner
          echo "image=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Build Docker image with version and latest tags
        run: |
          docker build \
            -t ${{ steps.vars.outputs.image }}:${{ steps.version.outputs.version }} \
            -t ${{ steps.vars.outputs.image }}:latest \
            .

      - name: Push version tag
        run: |
          docker push ${{ steps.vars.outputs.image }}:${{ steps.version.outputs.version }}

      - name: Push latest tag
        run: |
          docker push ${{ steps.vars.outputs.image }}:latest
